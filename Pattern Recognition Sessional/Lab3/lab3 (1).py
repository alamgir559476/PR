# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BV_ZqWr1CtSOSWxy0X2uWCK9oLSHtI_J
"""

import matplotlib as plt
import numpy as np
import cv2
from google.colab.patches import cv2_imshow # for image display

from google.colab import drive
drive.mount('/content/drive')

img = cv2.imread("/content/drive/My Drive/colab/mountain.jpg", 1) 
cv2_imshow(img)

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)
K = 2
attempts=10

img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
twoDimage = img.reshape((-1,3))
twoDimage = np.float32(twoDimage)
twoDimage.shape

img.shape

K=2
ret,label,center=cv2.kmeans(twoDimage,K,None,criteria,attempts,cv2.KMEANS_PP_CENTERS)
center = np.uint8(center)
res = center[label.flatten()]
result_image = res.reshape((img.shape))
cv2_imshow(result_image)

result_image.shape

center

"""iii) Detecting and Drawing Contours

"""

gray = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY)
cv2_imshow(gray)

_,thresh = cv2.threshold(gray, np.mean(gray), 255, cv2.THRESH_BINARY_INV)
cv2_imshow(thresh)
canny = cv2.Canny(thresh,0,255)
cv2_imshow(canny)
edges = cv2.dilate(canny,None)
cv2_imshow(edges)

""" Segmentation using Color Masking
 
"""

img = cv2.resize(img,(256,256))
cnt = sorted(cv2.findContours(edges, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)[-2], key=cv2.contourArea)[-1]
mask = np.zeros((256,256), np.uint8)
masked = cv2.drawContours(mask, [cnt],-1, 255, -1)
cv2_imshow(masked)

dst = cv2.bitwise_and(img, img, mask=mask)
segmented = cv2.cvtColor(dst, cv2.COLOR_BGR2RGB)
cv2_imshow(dst)
cv2_imshow(segmented)

img = cv2.imread("/content/drive/My Drive/colab/mountain.jpg", 1) 
rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
hsv_img = cv2.cvtColor(rgb_img, cv2.COLOR_RGB2HSV)

light_blue = (90, 90, 90)
dark_blue = (128, 255, 255)
# You can use the following values for green
light_green = (30, 30, 30)
dark_green = (70, 255, 255)
mask = cv2.inRange(hsv_img, light_blue, dark_blue)
cv2_imshow(mask)

result = cv2.bitwise_and(img, img, mask=mask)
cv2_imshow(result)